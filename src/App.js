import React from 'react'
import './App.css'
import { useEffect, useState } from 'react'
import axios from 'axios'
import Row from './components/Row'

const url = 'http://localhost:3001'

function App() {
  const [task, setTask] = useState('')
  const [tasks, setTasks] = useState([])

/* Axios is used to execute HTTP GET call.  
Axios always returns value under name data (response.data). 
In this case it will contain json returned from the server.

Possible error is displayed using alert. 
If server is responding, it will return json object
 which contains error object, which will be displayed. 
If there is a network error and server does not even respond,
 general error is displayed 
(since there is no error object returned from server). 
*/ 

  useEffect(() => {
    axios.get(url)
    .then(response => {
      setTasks(response.data)
    }).catch(error => {
      alert(error.response.data.error ? error.response.data.error : error)
    })
  }, [])
  //UseEffect is executed once when component mounts (“loads”) if dependency array is empty.

/*Inserting new data is done
 by posting json object to the server. 
In this case only field is description, 
 and id is generated by the database. 
If data is inserted successfully,
 UI and state variables are updated. 
*/

  const addTask = () => {
    
    axios.post(url + '/create', {
      description: task
    })
    .then(response => {
    setTasks([...tasks, {id: response.data.id, description: task}])
    setTask('')
  }).catch(error => {
    alert(error.response.data.error ? error.response.data.error : error)
  })
}

//Delete HTTP method is used to delete task. Id is passed as part of HTTP GET request. 

  const deleteTask = (id) => {
    axios.delete(url + '/delete/' + id) 
    .then(response => {
      const withoutRemoved = tasks.filter((item) => item.id !== id)
      setTasks(withoutRemoved)
    }).catch(error => {
      alert(error.response.data.error ? error.response.data.error : error)
    })
    
  }

  return (
    <div id="container">
      <h1> Todos </h1>
      <form>
        <input 
        placeholder='Add new task'
        value={task}
        onChange={e => setTask(e.target.value)} 
        onKeyDown={e => {
          if (e.key === 'Enter') {
            e.preventDefault()
            addTask()
          }
        }}
        />
      </form>
      <ul>
          {
            tasks.map(item => (
             <Row key={item.id} item={item} deleteTask={deleteTask}/>
            ))
          }
      </ul>
    </div>
  )
}

export default App